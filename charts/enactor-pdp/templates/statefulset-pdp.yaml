{{- $root := . }}
{{- $basepath := .Template.BasePath }}
{{- range $pos := .Values.pdp.instances }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pdp-{{ .id }}
  namespace: {{ $root.Release.Namespace }}
  labels:
    {{- include "common.selectorLabels" $root | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "pdp.selectorLabels" $root | nindent 6 }}
  replicas: {{ $root.Values.replicas }}
  template:
    metadata:
      labels:
        {{- include "pdp.selectorLabels" $root | nindent 8 }}
        {{- include "common.selectorLabels" $root | nindent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap-pdp.yaml") $root | sha256sum }}
    spec:
      terminationGracePeriodSeconds: 15
      serviceAccountName: {{ include "pdp.serviceAccountName" $root }}
      {{- if $root.Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range $name := $root.Values.imagePullSecrets }}
        - name: {{ $name }}
      {{- end }}
      {{- end }}

      enableServiceLinks: false

      initContainers:
        - name: verifydb
          image: busybox:1.31
          command: 
            - 'sh'
            - '-c'
            - |-
              echo -e "Checking for the availability of MySQL Server deployment '$SERVERNAME'";
              while ! nc -z $SERVERNAME 3306;
                do sleep 2;
                printf "-";
              done;
              echo -e "  >> MySQL DB Server '$SERVERNAME' has started";
          env:
            - name: SERVERNAME
              value: {{ template "dbserver" $root }}

      containers:
        - name: pdp
#          image: {{ $root.Values.pdp.image.repository }}:{{ $root.Values.pdp.image.tag | default  "latest" }}
          image: {{ include "image" $root.Values.pdp.image }}
          imagePullPolicy: {{ $root.Values.pdp.image.pullPolicy  }}
          ports:
            - containerPort: 39901
              name: pdp-http
            - containerPort: 53311
              name: pdp-https
            - containerPort: 39847
              name: jmx
            - containerPort: 39848
              name: pdp-jmx
          env:
            {{- include "env.defaults" $root | nindent 12 }}
            {{- include "env.pdp" $root | nindent 12 }}
            - name: ENACTOR_CONTAINER_DEVICEID
              value: {{ .hostId | quote }}
            - name: ENACTOR_JMX_APPLICATIONID
              value: {{ .hostId | quote }}
            - name: ENACTOR_SERVICE_DEVICEID
              value: {{ .hostId | quote }}
          envFrom:
            - configMapRef:
                name: config-common
                
            - configMapRef:
                name: config-{{ $root.Values.pdp.name }}

            - secretRef:
                name: secret-common
                
          # readinessProbe:
          #   httpGet:
          #     path: /WebMaintenance/
          #     port: 39830

          volumeMounts:
            - name: pdp-home
              mountPath: /enactor/app/home
            - name: truststore
              mountPath: /enactor/app/custom/trust
            # - name: enactor-config
            #   mountPath: /enactor/app/config/enactor.xml
            #   subPath: enactor.xml

      volumes:
        - name: truststore
          secret:
            secretName: {{ $root.Values.truststore.certSecret }}
      #   - name: keystore
      #     secret:
      #       secretName: {{ $root.Release.Name }}-keystore
        # - name: enactor-config
        #   configMap:
        #     name: {{ $root.Release.Name }}-enactor-config
      
  volumeClaimTemplates:
    - metadata:
        name: pdp-home
      spec:
        storageClassName: {{ $root.Values.pdp.persistence.storageClass }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ $root.Values.pdp.persistence.size }}
{{- end }}